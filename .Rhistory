theObject@velocity = c(0.0, 0.0)
validObject(theObject)
return(theObject)
}
)
setMethod(
f = "resetActivity",
signature = c("Agent", "numeric")
defintion = function(theObject, value)
{
theObject@active = TRUE
theObject@velocity = value
validObject(theObject)
return(theObject)
}
)
setGeneric(
name = "resetActivity",
def = function(theObject, value){
standardGeneric("resetActivity")
}
)
setMethod(
f = "resetActivity",
signature = c("Agent", "logical")
defintion = function(theObject, value)
{
theObject@active = value
theObject@velocity = c(0.0, 0.0)
validObject(theObject)
return(theObject)
}
)
setMethod(
f = "resetActivity",
signature = c("Agent", "numeric")
defintion = function(theObject, value)
{
theObject@active = TRUE
theObject@velocity = value
validObject(theObject)
return(theObject)
}
)
setGeneric(
name = "resetActivity",
def = function(theObject, value){
standardGeneric("resetActivity")
}
)
setMethod(
f = "resetActivity",
signature = c("Agent", "logical"),
defintion = function(theObject, value)
{
theObject@active = value
theObject@velocity = c(0.0, 0.0)
validObject(theObject)
return(theObject)
}
)
setMethod(
f = "resetActivity",
signature = c("Agent", "numeric"),
defintion = function(theObject, value)
{
theObject@active = TRUE
theObject@velocity = value
validObject(theObject)
return(theObject)
}
)
setGeneric(
name = "resetActivity",
def = function(theObject, value){
standardGeneric("resetActivity")
}
)
setMethod(
f = "resetActivity",
signature = c("Agent", "logical"),
definition = function(theObject, value)
{
theObject@active = value
theObject@velocity = c(0.0, 0.0)
validObject(theObject)
return(theObject)
}
)
setMethod(
f = "resetActivity",
signature = c("Agent", "numeric"),
definition = function(theObject, value)
{
theObject@active = TRUE
theObject@velocity = value
validObject(theObject)
return(theObject)
}
)
a <- Agent()
a <- setVelocity(a,0,0.3)
a <- setVelocity(a,c(0,0.3))
a
resetActivity(a, FALSE)
resetActivity(a, c(0.9,0.8))
resetActivity(a, FALSE)
resetActivity(a, TRUE)
?par
hist(airquality$ozone)
data(datasets)
hist(airquality$ozone)
library(datasets)
hist(airquality$ozone)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
?transform
airquality <- transform(airquality, Month = factor(Month))
airquality$Month
boxplot(Ozone ~ Month, data = airquality, xlab = "Month", ylab = "Ozone")
levels(airquality$Month)
lev<-levels(airquality$Month)
?Date
months(lev)
months(as.numeric(lev))
as.numeric(lev)
months(as.Date(as.numeric(lev))))
months(as.Date(as.numeric(lev)))
months(as.Date(as.numeric(lev), origin = "January"))
months(as.Date(as.numeric(lev), origin = "%M"))
airquality
source('~/BasePlottingSystem.R')
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom =c("points", "smooth"))
qplot(displ, hwy, data = mpg, geom =c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = .~drv, binwidth = 2)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
library(lattice)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel
library(lattice)
?panel()
?lattice::panel()
?lattice::panel
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies) + geom_smooth()
diamonds[sample(nrow(diamonds),10),]
library(ggplot2)
diamonds[sample(nrow(diamonds),10),]
dsmall <- diamonds[sample(nrow(diamonds),100),]
dsmall
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds),100),]
qplot(y = price/carat, x = color, data = diamonds, geom = c("jitter") )
qplot(y = price/carat, x = order(color), data = diamonds, geom = c("jitter") )
qplot(y = price/carat, x = color, data = diamonds, geom = c("jitter") )
qplot(y = price/carat, x = color, data = diamonds, geom = c("boxplot") )
qplot(y = price/carat, x = color, data = diamonds, geom = c("jitter"), alpha = 1/5 )
qplot(y = price/carat, x = color, data = diamonds, geom = c("jitter"), alpha = I(1/50))
qplot(y = price/carat, x = color, data = diamonds, geom = c("jitter"), alpha = I(1/10))
qplot(y = price/carat, x = color, data = diamonds, geom = c("jitter"), alpha = I(1/100))
qplot(y = price/carat, x = color, data = diamonds, geom = c("jitter"), alpha = I(1/50))
qplot(x = carat, data = dsmall, geom = c("histogram"))
qplot(x = carat, data = dsmall, geom = c("histogram"), binwifth = 2)
qplot(x = carat, data = dsmall, geom = c("histogram"), binwifth = 0.8)
qplot(x = carat, data = dsmall, geom = c("histogram"), binwifth = 5)
qplot(x = carat, data = dsmall, geom = c("histogram"), binwidth = 5)
qplot(x = carat, data = dsmall, geom = c("histogram"), binwidth = 0.8)
qplot(x = carat, data = dsmall, geom = c("histogram"), binwidth = 0.1)
qplot(x = carat, data = dsmall, geom = c("histogram"))
qplot(x = carat, data = dsmall, geom = c("density"))
qplot(x = carat, data = dsmall, geom = c("histogram"), breaks = 100)
qplot(x = carat, data = dsmall, geom = c("histogram"), breaks = 10)
qplot(x = carat, data = dsmall, geom = c("histogram"), binwidth = 0.1)
qplot(x = carat, data = dsmall, geom = c("histogram"), binwidth = 0.01)
qplot(x = carat, data = dsmall, geom = c("histogram"), binwidth = 0.1)
qplot(x = carat, data = dsmall, geom = c("histogram"), binwidth = 0.1, xlim =c(0,3))
qplot(x = carat, data = diamonds, geom = c("histogram"), binwidth = 0.1, xlim =c(0,3))
qplot(x = carat, data = diamonds, geom = c("histogram"), binwidth = 0.1, xlim = c(0,5))
qplot(x = carat, data = diamonds, geom = c("histogram"), binwidth = 0.5, xlim = c(0,5))
qplot(x = carat, data = diamonds, geom = c("histogram"), binwidth = 0.3, xlim = c(0,5))
qplot(x = carat, data = diamonds, geom = c("histogram"), binwidth = 0.3, xlim = c(0,3))
qplot(x = carat, data = diamonds, geom = c("histogram"), binwidth = 0.1, xlim = c(0,3))
diamonds
qplot(x = carat, data = diamonds, geom = c("histogram"), binwidth = 0.1, xlim = c(0,3), color = color)
qplot(x = carat, data = diamonds, geom = c("histogram"), binwidth = 0.1, xlim = c(0,3), colour = color)
qplot(x = carat, data = diamonds, geom = c("histogram"), colour = color)
qplot(x = carat, data = diamonds, geom = c("histogram"), fill = color)
qplot(x = carat, data = diamonds, geom = c("density"), colour = color )
qplot(x = color, data = diamonds)
qplot(x = color, data = diamonds, geom = c("bar"), weight = carat
)
qplot(x = color, data = diamonds, geom = c("bar"), weight = carat) + scale_y_continuous("carat")
qplot(x = color, data = diamonds)
qplot(x = color, data = diamonds, geom = c("bar"), weight = carat) + scale_y_continuous("carat")
economics
par(mfrow= c(2,1))
qplot(x = date, y = unmeploy, data = economcs, geom = c("line"))
qplot(x = date, y = unmeploy, data = economics, geom = c("line"))
qplot(x = date, y = unemploy, data = economics, geom = c("line"))
par(mfrow= c(2,1))
qplot(x = date, y = unemploy, data = economics, geom = c("line"))
qplot(x = date, y = uempmed, data = economics, geom = c("line"))
names(economics)
year <- function(x) as.POSIXlt(x)$year +  1900
qplot(unemploy / pop, uempmed, data = economics,
geom = c("point", "path"))
qplot(unemploy / pop, uempmed, data = economics,
geom = "path", colour = year(date)) + scale_area()
qplot(unemploy / pop, uempmed, data = economics,
geom = "path", colour = year(date)) + scale_size_area()
qplot(x = carat, data = diamonds, geom = "hist", facets = .~color)
qplot(x = carat, data = diamonds, geom = c("histogram"), facets = .~color)
qplot(x = carat, data = diamonds, geom = c("histogram"), facets = color ~.)
qplot(x = carat, data = diamonds, geom = c("histogram"), facets = color ~., xlim=c(0,3))
?plotmath
qplot(x = carat, y = price, data = dsmall, geom = c("point"),
xlab = "Weight in Carats", ylab = "Price ($)",
title = "Relationship between the Diamond Weight and Price")
qplot(x = carat, y = price, data = dsmall, geom = c("point"),
xlab = "Weight in Carats", ylab = "Price ($)",
main = "Relationship between the Diamond Weight and Price")
# Overrading the default grouping
library(nlme)
data(Oxboys)
# ggplot 2
library(ggplot2)
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds),100),]
ggplot(diamonds, aes(color, prices/carat)) + geom_jiter()
ggplot(diamonds, aes(color, prices/carat)) + geom_histogram(stat = list("jitter"))
ggplot(diamonds, aes(color, prices/carat)) + geom_histogram(stat("jitter"))
ggplot(diamonds, aes(color, prices/carat)) + geom_histogram(stat ="jitter")
ggplot(diamonds, aes(color, prices/carat)) + geom_jitter()
ggplot(diamonds, aes(color, price/carat)) + geom_jitter()
ggplot(diamonds, aes(color, price/carat)) + geom_jitter() + geom_hline()
?geom_hline
ggplot(diamonds, aes(color, price/carat)) + geom_jitter() + geom_hline(yintercept = 5)
ggplot(diamonds, aes(color, price/carat)) + geom_jitter() + geom_hline(yintercept = 15000)
ggplot(diamonds, aes(color, price/carat)) + geom_jitter() + geom_hline(yintercept = 15000, aes(color = "steelblue"))
?geom_hline
ggplot(diamonds, aes(color, price/carat)) + geom_jitter() + geom_hline(yintercept = 15000, aes(colour = "steelblue"))
?geom_hline
ggplot(diamonds, aes(color, price/carat)) + geom_jitter() + geom_hline(yintercept = 15000, colour = "steelblue")
?geom
?geoms
ggplot(diamonds, aes(x = carat)) + geom_histogram(aes(y = ..density..))
ggplot(diamonds, aes(x = carat, fill = colour)) + geom_histogram(aes(y = ..density..))
ggplot(diamonds, aes(x = carat, fill = color)) + geom_histogram(aes(y = ..density..))
ggplot(diamonds, aes(x = carat, fill = color)) + geom_histogram(aes(y = ..density..), position = "dodge")
ggplot(diamonds, aes(x = carat, fill = color)) + geom_histogram(aes(y = ..density..), position = "jitter")
library(ggplot2)
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds),100),]
df <- data.frame(x = rnorm(2000), y = rnorm(2000))
norm <- ggplot(df, aes(x,y))
norm + geom_point(color = I("black"), alpha = 1/10)
norm + geom_point(color = I("black"), aes(alpha = 1/10))
norm + geom_point(color = I("black"), alpha = 1/10)
df <- data.frame(x = rnorm(20000), y = rnorm(20000))
norm <- ggplot(df, aes(x,y))
norm + geom_point(color = I("black"), alpha = 1/10)
df <- data.frame(x = rnorm(2000), y = rnorm(2000))
norm <- ggplot(df, aes(x,y))
norm + geom_point(color = I("black"), alpha = 1/10)
norm + geom_point(color = I("black"), size = 0.1)
norm + geom_point(color = I("black"), shape = 1)
norm + geom_point()
norm + jeom_jitter()
norm + geom_jitter()
td <- ggplot(diamonds, aes(table, depth)) + xlim(50,70) + ylim(50,70)
td + geom_point()
td + geom_jitter()
jit <- position_jitter(width = 0.5)
td + jit
td + geom_jitter(position = jit)
td + geom_jitter(position = jit, colour = I("black"), alpha = 1/10)
td + geom_jitter(position = jit)
td + geom_jitter(position = jit, colour = I("black"), alpha = 1/100)
d <- ggpplot(diamonds, aes(carat, price)) + xlim(1,3) = opts(legend.position = "none")
d + stat_bin2d()
d <- ggplot(diamonds, aes(carat, price)) + xlim(1,3) = opts(legend.position = "none")
d <- ggplot(diamonds, aes(carat, price)) + xlim(1,3) + opts(legend.position = "none")
d <- ggplot(diamonds, aes(carat, price)) + xlim(1,3) + theme(legend.position = "none")
d + stat_bin2d()
d <- ggplot(diamonds, aes(carat, price)) + xlim(1,3) #+ theme(legend.position = "none")
d + stat_bin2d()
d + stat_bin2d(bins = 10)
d + stat_bin2d(binwidth = c(0.02, 200))
d + bin_hex()
d + stat_binhex()
install.packages("hexbin"), library(hexbin), d + stat_binhex()
install.packages("hexbin"); library(hexbin); d + stat_binhex()
d + stat_binhex(bins = 10)
d + stat_binhex(binwidth = c(0.02, 200))
binwidth = c(100, 200)
binwidth = c(150, 200)
d + stat_binhex(binwidth = c(100, 200))
d + stat_binhex(binwidth = c(0.5, 200))
d + stat_binhex(binwidth = c(0.5,10))
d + stat_binhex(binwidth = c(1,100))
d + stat_binhex(binwidth = c(0.02, 200))
d + geom_point()
d + geom_point() +geom_density2d()
d + stat_density2d(geom = "point", aes(size = ..density..),
contour = F) + scale_area(to = c(0.2, 1.5))
d + stat_density2d(geom = "point", aes(size = ..density..),
contour = F) + scale_size_area(to = c(0.2, 1.5))
d + stat_density2d(geom = "point", aes(size = ..density..),
contour = F))
d + stat_density2d(geom = "point", aes(size = ..density..),
contour = F)
install.packages("maps")
?maps
library(maps)
?maps
library(maps)
?maps
??maps
head(joinedData)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
head(joineData)
head(joinedData)
weekdayPlotData <- joinedData %>%
select(steps, interval, day_index) %>%
group_by(day_index, interval) %>%
summarize(mean_step = mean(steps)) %>%
arrange(day_index)
head(weekdayPlotData, n = 300)
print(weekdayPlotData, n = 300)
weekdayPlotData <- joinedData %>%
select(steps, interval, day_index) %>%
group_by(day_index, interval) %>%
summarize(mean_step = mean(steps)) %>%
arrange(day_index)
oprions(scipen = 999)
print(weekdayPlotData, n = 300)
weekdayPlotData <- joinedData %>%
select(steps, interval, day_index) %>%
group_by(day_index, interval) %>%
summarize(mean_step = mean(steps)) %>%
arrange(day_index)
options(scipen = 999)
print(weekdayPlotData, n = 300)
panelPlot <- ggplot(weekdayPlotData, aes(x = interval, y = day_index))
panelPlot + geom_line(colour = "steelblue", size = 0.5)
panelPlot <- ggplot(weekdayPlotData, aes(x = interval, y = mean_step))
panelPlot + geom_line(colour = "steelblue", size = 0.5)
panelPlot <- ggplot(weekdayPlotData, aes(x = interval, y = mean_step))
panelPlot <- panelPlot + geom_line(colour = "steelblue", size = 0.2)
?facet_wrap
panelPlot + facet_wrap(day_index, nrow = 2, ncol = 1)
str(weekdayPlotData)
panelPlot <- ggplot(weekdayPlotData, aes(x = interval, y = mean_step))
panelPlot <- panelPlot + geom_line(colour = "steelblue", size = 0.2)
panelPlot + facet_wrap(~day_index, nrow = 2, ncol = 1)
panelPlot + facet_wrap(~ day_index, nrow = 2, ncol = 1)
panelPlot <- ggplot(weekdayPlotData, aes(x = interval, y = mean_step))
panelPlot <- panelPlot + geom_line(colour = "steelblue", size = 0.2)
panelPlot <- panelPlot + facet_wrap(~ day_index, nrow = 2, ncol = 1)
panelPlot <- panelPlot + ggtitle("Mean Steps per Interval (Weekdays/Weekends)")
panelPlot + xlab("Mean Number #of Steps") + ylab("5 minute interval")
panelPlot <- ggplot(weekdayPlotData, aes(x = interval, y = mean_step))
panelPlot <- panelPlot + geom_line(colour = "steelblue", size = 0.2)
panelPlot <- panelPlot + facet_wrap(~ day_index, nrow = 2, ncol = 1)
panelPlot <- panelPlot + ggtitle("Mean Steps per Interval (Weekdays/Weekends)")
panelPlot + xlab("Mean Number of Steps") + ylab("5 minute interval")
panelPlot <- ggplot(weekdayPlotData, aes(x = interval, y = mean_step))
panelPlot <- panelPlot + geom_line(colour = "steelblue", size = 0.2)
panelPlot <- panelPlot + facet_wrap(~ day_index, nrow = 2, ncol = 1)
panelPlot <- panelPlot + ggtitle("Mean Number Steps per Interval (Weekdays/Weekends)")
panelPlot + xlab("Mean Number of Steps") + ylab("5 minute interval")
?ggtitle
setwd("C:/Users/Michael/reprodResearch")
# load the data into R
# convert date varible to date class
# load dplyr and ggplot2 ands stats packages
input <- read.csv("activity.csv", header = T, sep = ",")
input$date <- as.Date(input$date, "%Y-%m-%d")
library(dplyr)
library(ggplot2)
library(stats)
# calculate the number of steps per day with dplyr package
# ignoring the missing values
stepPerDay <- input %>%
group_by(date) %>%
summarize(total_steps = sum(steps))%>%
arrange(date)
######
# What is mean total number of steps taken per day?
######
# plot a histogram of total number of steps per day
histStepDay <- ggplot(stepPerDay, aes(total_steps))
histStepDay <- histStepDay + geom_histogram(fill = "steelblue")
histStepDay <- histStepDay + ggtitle( "Number of Steps by Day" )
histStepDay <- histStepDay + xlab("Steps per Day")
histStepDay <- histStepDay + ylab("Number of Days")
histStepDay
# the mean of the total number of steps taken per day
mean(stepPerDay$total_steps, na.rm = T)
# the median of the total number of steps taken per day
median(stepPerDay$total_steps, na.rm = T)
#####
# What is the average daily activity pattern?
#####
# the average number of steps taken over a 5 minute interval, averaged across all days.
fiveMinAve <- input %>%
group_by(interval) %>%
summarize(avg_step = mean(steps, na.rm = T)) %>%
arrange(interval)
# create a ts plot
ts <- ggplot(fiveMinAve, aes(x = interval, y = avg_step))
ts <- ts + geom_line(colour = "steelblue", size = 0.5)
ts <- ts + ggtitle("Average Steps over Interval")
ts + xlab("five minute interval") + ylab("Average number of Steps")
# Which 5-minute interval, on average across all the days in the dataset,
# contains the maximum number of steps?
as.data.frame(fiveMinAve[fiveMinAve$avg_step %in% max(fiveMinAve$avg_step),])
###
# Imputing missing values
###
# number of missin values in the data set (obly steps varialbe considered)
sum(is.na(input$steps))
# filling in all of the missing values in the dataset
# mean value for the interval
# join the input data with the 5-minute interval average
joinedData <- inner_join(input, fiveMinAve)
# if the step value is NA replace it with the average
# value for the 5 minute interval
for(i in 1:dim(joinedData)[1]){
if(is.na(joinedData[i,]$steps)){
joinedData[i,]$steps <- joinedData[i,]$avg_step
}
}
# Create a new dataset that is equal to the original dataset
# but with the missing data filled in
joinedData <-joinedData[,1:3]
# get the total number of steps per day
stepPerDay2 <- joinedData %>%
group_by(date) %>%
summarize(total_step = sum(steps)) %>%
arrange(date)
# plot a histogram of total number of steps per day
# with missing values being replaced
histDay2 <- ggplot(stepPerDay2, aes(total_step))
histDay2 <- histDay2 + geom_histogram(fill = "steelblue")
histDay2 <- histDay2 + ggtitle( "Number of Steps by Day (NA's imputed)" )
histDay2 <- histDay2 + xlab("Steps per Day")
histDay2 <- histDay2 + ylab("Number of Days")
histDay2
# the new mean of the total number of steps taken per day
mean(stepPerDay2$total_step)
# the new median of the total number of steps taken per day
median(stepPerDay2$total_step)
# there isn't a significat different between the mean/meadian claculated with NA's
# and after the NA's were replaced with the average value of steps in the five
# minute interval
####
# Are there differences in activity patterns between weekdays and weekends?
####
# Create a new factor variable in the dataset
# with two levels – “weekday” and “weekend”
joinedData$weekday <-weekdays(joinedData$date, abbreviate = FALSE)
# create a factor variable which takes value 1 if the day is weekday
# and the value 2 if the day is weekend day
joinedData$day_index <- 0
for(i in 1:dim(joinedData)[1]){
if (joinedData[i,]$weekday %in% c(
"Monday","Tuesday","Wednesday","Thursday","Friday" )){
joinedData[i,]$day_index <- 1
}else{
joinedData[i,]$day_index <- 2
}
}
# coerce day_index into factor variable
joinedData$day_index <- as.factor(joinedData$day_index)
levels(joinedData$day_index) <- c("weekday", "weekend")
head(joinedData)
# calculate the average step per interval grouped by
# week/weekend day
weekdayPlotData <- joinedData %>%
select(steps, interval, day_index) %>%
group_by(day_index, interval) %>%
summarize(mean_step = mean(steps)) %>%
arrange(day_index)
options(scipen = 999)
print(weekdayPlotData, n = 300)
str(weekdayPlotData)
# create a panel ts plot which splits the mean
# number of steps over the five minute interval
# according to weekdays and weekends
panelPlot <- ggplot(weekdayPlotData, aes(x = interval, y = mean_step))
panelPlot <- panelPlot + geom_line(colour = "steelblue", size = 0.2)
panelPlot <- panelPlot + facet_wrap(~ day_index, nrow = 2, ncol = 1)
panelPlot <- panelPlot + ggtitle("Mean Number Steps per Interval (Weekdays/Weekends)")
panelPlot + xlab("Mean Number of Steps") + ylab("5 minute interval")
?require
knit2HTML()
library(knitr)
knit2HTML()
knit2html()
?knit2html
knit2html()
knit2html(input = "./PA1_template.Rmd")
